[{"title":"Caddy 使用 Buypass Go SSL 作为证书提供商","path":"/2025/04/01/caddy-with-buypass-ssl/","content":"前言大家好啊，今天教大家一个脱裤子放屁的 Caddy 小技巧。 由 Let‘s Encrypt 获取的 SSL 证书一般有效期为 90 天。虽然可以采用 Certbot 和 acme.sh 一类的脚本，或者交给 Caddy 自动续期，但可能还是有些小伙伴想要获取有效期更长的免费证书。 Buypass Go SSLTLS 是一家挪威证书签发商的产品，基于 ACME ，证书的有效期为 180 天。那么，如何在 Caddy 中使用它替换默认的 Let’s Encrypt 呢？ 自定义兼容 ACME 的 CA 的通用语法在没有特别指明的情况下，Caddy 通常会使用 Let‘s Encrypt 或者 ZeroSSL 来作为 Certificate Authority。你也可以自定义 CA，这里有两种语法，可用于兼容 ACME 的签发者： 第一种，放在 Caddyfile 开头，作用于全局： acme_ca https://acme.zerossl.com/v2/DV90 # 换成自定义 CA\temail hi@example.dev 第二种，放在每个域名的大括号里面，作用于域名： tls hi@example.dev ca https://acme.zerossl.com/v2/DV90 # 换成自定义 CA 很可惜的是，经过我的尝试，这两种语法下 Buypass Go SSL 都无法获取到证书。大概是因为 Buypass 在某次更新后添加了 ARI 支持，导致了 Caddy 的 panic:certificate worker: runtime error: invalid memory address。 解决方法有两个：一是使用 Certbot 进行注册，再手动设置 Caddy 读取获得的证书；二是使用 acmez 方法一：使用 Certbot 手动获取证书（不推荐）按照 Certbot 的官方教程进行安装，此处不再赘述。 安装完成之后，运行如下命令： root@acme:~# certbot register -m YOUR_EMAIL --agree-tos --server https://api.buypass.com/acme/directory 此时，需要使用你的电子邮件地址在 Buypass 上注册，和 ZeroSSL 是一样的。 如果你不希望你的 web server （ Nginx Apache 都可以，但不是 Caddy ！）暂时停机的话，就选用 webroot 方式完成 ACME Challenge ，需要运行的命令是： root@acme:~# certbot certonly --webroot -w /var/www/example.com/public_html/ -d example.com -d www.example.com --server https://api.buypass.com/acme/directory 如果你用的是 Caddy ，由于 Caddy 默认的 https 重定向策略，导致 80 端口的验证几乎成为了不可能做到的事（不要说可以关掉 tls ，关掉 tls 做完验证之后就要重新开启 tls 读取获得的证书，下次续期的时候就会失败）。那就选用 standalone ： root@acme:~# certonly --standalone --email xxx@example.org -d example.org --server https://api.buypass.com/acme/directory 然后给 Caddy 读取证书的权限： root@acme:~# chmod 755 /etc/letsencrypt/live/ root@acme:~# chmod 755 /etc/letsencrypt/archive/root@acme:~# chmod 644 /etc/letsencrypt/live/example.org/*.pemroot@acme:~# chmod 644 /etc/letsencrypt/archive/example.org/*.pem 最后在 Caddyfile 配置 tls /etc/letsencrypt/live/example.org/fullchain.pem /etc/letsencrypt/live/example.org/privkey.pem 即可。 当然，只是做实验而已，不推荐所有人进行以上操作。同时使用 Caddy 和 Certbot 的行为纯粹是吃力不讨好，Caddy 默认会升级成 https ，并对证书进行自动续期，所以你几乎感受不到证书有效期的短暂和续期的麻烦。 方法二：使用 xcaddy 构建包含最新 acmez 模块的 Caddy首先，我们需要安装最新版的 Go 。 以 Linux x86-64 为例，运行 wget https://go.dev/dl/go1.24.1.linux-amd64.tar.gz ，然后再运行 rm -rf /usr/local/go tar -C /usr/local -xzf go1.24.1.linux-amd64.tar.gz 和 export PATH=$PATH:/usr/local/go/bin ， 最后运行 go version 验证即可。 然后，我们需要安装 xcaddy。 root@acme:~# go install github.com/caddyserver/xcaddy/cmd/xcaddy@latestroot@acme:~# xcaddy build --with github.com/mholt/acmez/v3@v3.1.1 最后，用 xcaddy 构建的新可执行文件替换掉原来的 Caddy 可执行文件。这一步的操作与 Caddy 的运行方式有关，此处仅展示 systemd 服务的替换方法。 root@acme:~# systemctl stop caddyroot@acme:~# cp /usr/bin/caddy /usr/bin/caddy.bakroot@acme:~# cp ./caddy /usr/bin/caddyroot@acme:~# chown caddy:caddy /usr/bin/caddyroot@acme:~# chmod 755 /usr/bin/caddyroot@acme:~# systemctl start caddy 此时再在 Caddyfile 中使用语法： acme_ca https://api.buypass.com/acme/directory\temail hi@example.dev 就不会再出现 panic 了。 不过，如果你的网站之前已经有了 SSL 证书，那么你需要手动删除 /var/lib/caddy/.local/share/caddy/certificates/acme-v02.api.letsencrypt.org-directory 下的证书文件，然后重启 Caddy 。访问你的网站，如果没有套 CF 的话，就能看到 Buypass 签发的证书了；如果你套了 CF ，那么看到的依然是边缘证书。","tags":["caddy","ssl","buypass","certbot"],"categories":["日常"]},{"title":"本站推出新的公益服务：Vaultwarden，Wallos，Vikunja","path":"/2025/03/28/new-services-vaultwarden-wallos-vikunja/","content":"本站推出新的公益服务： Vaultwarden 密码管理器，不必多说。https://vw.obsp.de Wallos 订阅管理器。https://wallos.obsp.de Vikunja 日程管理器，支持CalDAV。https://vikunja.obsp.de 请注意，技术上我们无法获取您保存在Vaultwarden中的密码，但是可以删库跑路。所以，做好备份！ 为了避免潜在的滥用发件服务器隐患，所有服务的SMTP功能都被关闭了，这也就意味着您不能通过电子邮件重设密码。请谨记！ Enjoy~","tags":["Wallos","vaultwarden","vikunja","public-services"],"categories":["站务公告"]},{"title":"在Codeberg Pages上使用Hexo搭建博客","path":"/2025/03/19/hosting-blog-on-codeberg-pages/","content":"前言Numerus Fixus 项目的考试终于结束了，发挥得比较一般，没什么把握。放榜之后再整理一下自己的笔记和经验分享给大家吧（虽然感觉几乎没有人用得到，不过万一呢）。 放榜之前都是空闲时间，顺手把旧文章通过Tp2MD 插件导出了，写一写obsp 的Hexo 镜像搭建过程吧。 Typecho 的部署相对来说简单一些，可以直接docker compose，数据库每天备份，但是用久了感觉还是有点不顺手，尤其是发布和修改文章非常麻烦，每次发现错别字都要手动登录后台捉虫。也许直接从Markdown生成HTML的静态站点生成器更适合我一点。静态站点的内容可以托管在GitHub Pages、Gitlab Pages、Bitbucket Cloud和Codeberg Pages等，省去了挑选和维护服务器的烦恼，从写作文章到发布和查看效果的过程也更快速便捷。更重要的是，我发现Typecho 站点被搜索引擎抓取的时候似乎很难抓到文章标题，常常将正文的内容作为标题收录，这就导致了通过搜索关键词发现obsp 的读者往往会因为搜索引擎抓取的标题太奇怪而不愿意点进来，而Hexo 站点就没有这种缺点。Hexo 的缺点大概是每次重装系统换新设备，都要重新配环境。其他比较出名的静态站点生成器例如Hugo 和Jekyll 我还完全没有尝试过。 这篇文章主要聚焦使用Codeberg Pages的静态站点托管服务来托管Hexo 生成的页面打造博客的过程。Hexo 的官方文档对于Git部署说得也很详细，不过我会加入一些自定义和个性化的过程，例如使用主题、利用Giscus 连接GitHub repo discussions 作为评论区等。 以下操作在基于Arch Linux的发行版Manjaro Linux（内核：Linux 6.12.17-1-MANJARO）上完成，操作系统为64位 安装必要依赖Git 和 Node.js，由于自带，此处不再赘述，其它操作系统发行版可以参考Hexo官方文档。 安装HexoHexo 的安装非常简单：npm install -g hexo-cli 安装完成后，我们可以新建一个站点，每一个站点的设置和数据会以文件夹的形式储存，所以我们在你期望的根目录处进行init： $ hexo init folder $ cd folder $ npm install 这样，一个基本的站点目录结构就完成了。 新手可能会一头雾水：我的文章应该放在哪里？站点的设置文件在哪里？这个文件夹就是我的站点源码吗？ 其实，Hexo生成的静态站点现在还没有出现，我们的站点文件夹中存放的是用来生成HTML文件的资源。我们可以通过使用Hexo的各种命令或者直接读写站点文件夹中的文件来修改资源，从而修改最终生成的页面。 文件夹应该是这个结构： . ├── _config.yml ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes 很好理解，_config.yml是配置文件，package.json是应用程序的信息，scaffolds文件夹中存放模板，source存放的则是决定最终生成页面的文章内容的资源，包括尚未完成的草稿_drafts和已经准备好渲染和发布的_posts。 以Observer’s Space Hexo站为例，我用Obsidian打开~/obsp/source文件夹作为图谱，在图谱下面，可以看到我正在写的这篇《在Codeberg Pages上使用Hexo搭建博客》归属在_drafts文件夹里，而大家在Observer’s Space Hexo站上能看到的历史文章都归属在_posts文件夹里。当我们执行生成命令的时候，_drafts文件夹里的文章不会生成页面，当你准备好将它们发布的时候才会被移动到_posts文件夹，参与网页的生成。生成的HTML文件会被放在public文件夹里，当我们使用GitHub PagesCodeberg PagesBitbucket Cloud的静态站点托管服务时，我们做的主要是通过Hexo命令使用Git来将本地的public文件夹与远程仓库进行同步，Pages服务通过读取仓库中的内容展示网站。（GitLab Pages的部署略有不同，GitLab用户可以参考Hexo和GitLab Pages的官方文档，此处不再赘述。） Themes存放的是主题文件的配置，我们现在先不管它。 修改配置文件现在我们需要做的事是修改配置文件。仍然以Observer’s Space为例，由于_config.yml太长了，我只截取重要的部分进行说明： title: Observers Space Mirror #站点的标题favicon: https://s21.ax1x.com/2025/02/11/pEn6KsJ.png #访问网站时显示的头图，我选用了可以免费使用的Google Noto Emoji中ringed planet的Android 10版本，新版设计可以参考https://emojipedia.org/ringed-planet#designsavatar: https://s21.ax1x.com/2025/02/11/pEn6KsJ.png #网站的头像，细心的朋友可能发现我偷懒了，和头图用的是同一张嘿嘿subtitle: 宇宙中的观星者 #副标题description: This is a sister website of obsp.de. (Still in beta) #描述keywords: #关键词，懒得想author: Yuki Kamiki #神木友希的大名language: entimezone: UTC## Set your site url here. For example, if you use GitHub Page, set url as https://username.github.io/projecturl: https://hexo.obsp.de #这个可以设置成你等下要绑定的自定义域名，就像obsp一样，如果你想用Codeberg给的域名，就请设置成https://USERNAME.codeberg.page。错误的域名设置将会导致CSS和JavaScript资源加载失败，只能访问到文字内容。#。。。有一群乌鸦飞过#。。。有一群乌鸦飞过deploy: #涉及到使用Hexo自动部署命令的配置 type: git #我们使用git的方式进行自动部署 repo: git@codeberg.org:kamiki/obsp.git #Repo的地址，https或者ssh都可以。我的 pages 仓库拿去做别的内容了（欢迎大家访问~），所以给 obsp 创建了一个新仓库。如果你要用Codeberg Pages 并且在 Codeberg 提供的域名根目录 https://USERNAME.codeberg.page 访问的话就应该是git@codeberg.org:USERNAME/pages.git branch: main #跟踪远程仓库的分支 message: updates #commit时的提交信息 啊，配置文件搞定了！不要忘记保存退出哦！ 生成静态站点你可以使用hexo new [layout] xxx来新建一篇文章。 当你指明 layout 是draftpagepost 的时候，hexo 会将生成的 md 文件存放在source目录下对应类型的文件夹中，如果省略 layout 参数，那么默认生成的是 post 。 如果还没想好写什么，没关系，打开 source/_posts，会发现那里面并不是空白的，我们在执行hexo init的时候自动生成了一个 md 文件，它可以作为博客第一篇文章的资源。 执行hexo g，会发现生成了一个public文件夹。执行hexo deploy进行部署，会将这个文件夹中的内容发布到刚才在_config.yml中填写的仓库地址。 等一下……！好像不太对…… 发布到Codeberg Pages第一次用git的小伙伴可能不知道怎么连接远程仓库，请善用搜索引擎 和平时连小鸡的方式差不多，用公私钥或者用户名密码都可以。什么你说你没有连过小鸡？请善用搜索引擎 执行ssh-keygen -t ed25519 -C your_email@example.com，然后你就会在~/.ssh找到公私钥，公钥是那个文件名带 pub 的，私钥是不带的，把公钥内容上传到 Codeberg 设置中 ，然后再执行hexo deploy即可。 Enjoy！稍等片刻（Codeberg 正在码头给你整 SSL 证书），即可在https://USERNAME.codeberg.page/查看你的 landscape 主题 Hexo 博客。 绑定自定义域名把你的域名 CNAME 解析到username.codeberg.page，然后在仓库里新建一个.domains文件，输入你想要的域名example.org，再等一会（Codeberg 正在码头给你整 SSL 证书）即可通过自定义域名访问。 什么你说 root 不能有 CNAME 记录？你怎么不托管到能做CNAME拉平的NS提供商 也没问题，A记录解析到217.197.91.145，AAAA记录解析到2001:67c:1401:20f0::1，然后TXT记录username.codeberg.org即可。 主题配置（以本站为例）本站采用的是 Stellar 主题，感谢 xaoxuu 大佬开发和开源！ 因为我比较懒，所以采用了稳定版安装：npm i hexo-theme-stellar找到_config.yml文件中的theme: landscape改成theme: stellar然后重新运行hexo g和hexo deploy即可。 自定义字体（以本站为例）本站用的是霞鹜文楷（无衬线体、衬线体）和 PT Mono（等宽）。 新建一个专门给 Stellar 主题用的配置文件_config.stellar.yml，写入以下内容： inject: head: - link rel=stylesheet href=https://cdn.jsdelivr.net/npm/lxgw-wenkai-screen-web/style.css / - link rel=preconnect href=https://fonts.bunny.net - link href=https://fonts.bunny.net/css?family=pt-mono:400 rel=stylesheet /style: font-family: logo: LXGW WenKai Screen body: LXGW WenKai Screen code: PT Mono codeblock: PT Mono 注意 Stellar 仓库里的_config.stellar.yml示例使用了单引号内套双引号LXGW WenKai Screen,...，实测这样子无法应用字体，去掉双引号即可。 Giscus 评论区和 Typecho 不同，Hexo 默认是没有评论区的，而大部分博主还是希望能够听到读者的反馈，那么就有了各种各样的评论插件。Giscus 使用 GitHub 仓库的 Discussions 功能，按照 https://giscus.app/zh-CN 上的指导创建好公开仓库、安装 giscus app、启用 Discussions功能后，把你的用户名仓库名复制粘贴进去（很奇怪，手动输入会提示无法连接，复制粘贴就可以，这个 bug 可以复现，有人遇到了同样的问题）。 然后在 Stellar 配置文件里写入： comments: giscus: enable: true repo: YOUR_GITHUB_USERNAME/YOUR_REPO_NAME repo_id: YOUR_REPO_ID category: YOUR_CATEGORY_NAME category_id: YOUR_CATEGORY_ID mapping: pathname reactions_enabled: 1 emit_metadata: 0 input_position: bottom lang: en loading: lazy crossorigin: anonymous 重新运行一下hexo g hexo deploy即可。","tags":["codeberg","pages","staticsite","blog"],"categories":["日常"]},{"title":"本站推出剪贴板服务：Microbin","path":"/2025/03/17/obsp-microbin/","content":"Observer’s Space推出了一个新的公共Microbin实例，欢迎大家使用。 实例地址：https://bin.obsp.de 您可以通过设置有效期、阅读次数限制和权限来保证数据安全。 有关权限的说明： 公开该隐私级别允许所有人查找、查看、修改和删除您的上传。 未列出（推荐）未列出的上传无法被找到，除非有人知道其唯一的随机标识符。 如果有人知道此标识符，他们就可以查看、修改和删除上传内容。 只读使用此隐私设置，除非有人知道上传内容的唯一随机标识符，否则无法找到该上传内容。 如果有人知道该标识符，则可以查看内容，但如果不输入上传密码，则无法修改或删除内容。 隐私使用该隐私设置，除非有人知道上传的唯一随机标识符，否则无法找到上传内容。 如果有人知道该标识符，则在未输入上传密码的情况下无法查看、修改或删除该内容。 您的上传及其附件都经过加密，因此存储安全。 保密使用此隐私设置，除非有人知道上传的唯一随机标识符，否则无法找到上传内容。 如果有人知道该标识符，那么在未输入上传密码的情况无法查看、修改或删除该内容。 您的浏览器会向我们发送一个已经加密的版本，因此未加密的数据和密码根本不会离开您的设备。 此选项要求您在访问数据时多次输入密码，但非常安全。","tags":["microbin"],"categories":["站务公告"]},{"title":"2025.03.12更新","path":"/2025/03/12/2025-03-12-2025.03.12更新/","content":"家里云暂时掉线，站长要考试，服务器不能放在房间里. 对本站访问没有影响~","categories":["站务公告"]},{"title":"Rclone以WebDAV方式挂载Hetzner Storage Box","path":"/2025/03/10/2025-03-10-Rclone以WebDAV方式挂载Hetzner_Storage_Box/","content":"疑似有点太水了，想不出这个有什么出教程的必要（不是）。 本来想尝试Rclone UI，奈何AppImage版在Arch上根本启动不了，我试着在AUR里找了一下yay rclone-ui，居然没找到……原来AUR也不是万能的，那就继续用命令行的原版Rclone吧。 Hetzner买Storage Box的过程就跳过了。因为hz是PAYG的模式，所以账单一般下个月才会出。 进控制台：https://robot.hetzner.com/storage ，Reset一下根用户密码。然后打开WebDAV、SSH，用WebDAV或SSH工具进去创建一个空的子文件夹，如果没有子文件夹的话是无法创建子账户的。 然后去sub-account创建一个子账户，打开WebDAV和External-access，以便在互联网上访问。 子账户的WebDAV地址是https://uxxxx(换成你的主账户id)-subx(换成你的子账户id).your-storagebox.de，账户是uxxxx-subx，密码是你设置的密码。 Rclone官方一键安装脚本：sudo -v ; curl https://rclone.org/install.sh | sudo bash 按照提示操作选择新建远端，起个名字（以Hetzner为例）选中WebDAV，然后把上面的地址、用户名和密码填进去，剩余部分留空即可。 挂载：rclone mount hetzner: /path/to/mnt 这个时候就会发现Rclone提示这个远端不支持流式传输（streaming），需要加上关于缓存文件的参数。 那么命令就可以修改成rclone mount hetzner: /path/to/mnt --vfs-cache-mode writes 运行命令的时候会发现只能前台运行，如果退出执行命令就会导致停止挂载。 解决办法也很简单，加入后台运行参数即可：rclone mount remote:path /path/to/mount --vfs-cache-mode writes --daemon。","tags":["rclone","webdav","hetzner","storage"],"categories":["日常"]},{"title":"2025.03.09更新","path":"/2025/03/10/2025-03-09-2025.03.09更新/","content":"站长在备考，这个月更新得比较少。 准备把从今往后的博文从Typecho镜像到Hexo，Hexo网站托管在Codeberg Pages，暂时还没开发出Hexo的玩法，不过网站已经搭建起来了：https://hexo.obsp.de，欢迎访问（目前里面什么都没有） Roadmap：买Servarica的大盘鸡，为读者提供Nextcloud免费服务~","categories":["站务公告"]},{"title":"CalDAV及CardDAV服务器Radicale V3部署指南+Caddy V2一行反代","path":"/2025/03/05/2025-03-05-CalDAV及CardDAV服务器Radicale_V3部署指南+Caddy_V2一行反代/","content":"Baïkal的部署比较简单，然而由于某种神秘原因，Baïkal的日历在iOS上无法连接，即使我按照同类Github Issue中的解决方案在反代配置中使用了rewrite依然无法战胜，只好用回我的老朋友Radicale。 之前小鸡配置比较低，只跑得起这种超轻量级的服务，尽管现在在小鸡上部署了owncloud和nextcloud，我还是更习惯Radicale的管理界面，就有了今天这篇文章。Radicale官方的文档写得还是很详细的，可以自行查阅。 前置条件：以下操作在Debian 12 bookworm中使用root用户完成。 安装步骤安装Python3虚拟环境： root@debvmde:~# apt install python3-venv 创建并进入radicale虚拟环境： root@debvmde:~$ python3 -m venv radicaleroot@debvmde:~$ radicale/bin/pip install pip --upgrade setuptools wheelroot@debvmde:~$ source radicale/bin/activate 这时可以看到root@debvmde:~# 已经变成了(radicale) root@debvmde:~# ，说明我们已经进入虚拟环境，可以pip install了。 运行一下：pip install --upgrade radicale radicale --version 创建配置文件：mkdir -p .config/radicale nano .config/radicale/config，根据官方文档的说法： Radicale tries to load configuration files from /etc/radicale/config and ~/.config/radicale/config. Custom paths can be specified with the --config /path/to/config command line argument or the RADICALE_CONFIG environment variable. Multiple configuration files can be separated by : (resp. ; on Windows). Paths that start with ? are optional. 创建用户名和密码文件.config/radicale/users，可选的加密方式有plainmd5bcryptautodetect，此处选用md5. （当然md5也并不是首选，关于怎么用htpasswd，请自行查阅官方文档） 我们希望选用的用户名和密码分别是user和password，如果采用plain加密，.config/radicale/users内就会存有明文的用户名和密码user:password，这样显然是不太安全的，所以需要以哈希值的形式存储密码。 使用htpasswd md5哈希生成器，把密码加密，得到形如$apr1$j9JJ7hNw$aY8K5tLzVq4hi1XX/CnD70的字符串，我们的密码文件中加入user:$apr1$j9JJ7hNw$aY8K5tLzVq4hi1XX/CnD70一行即可。 打开配置文件~/.config/radicale/config，加入以下内容： [server]hosts = 0.0.0.0:5232, [::]:5232[storage]filesystem_folder=/root/radicale/collections[auth]type = htpasswdhtpasswd_filename = /root/.config/radicale/usershtpasswd_encryption = md5[server]max_connections = 20# 100 Megabytemax_content_length = 100000000# 30 secondstimeout = 30[auth]# Average delay after failed login attempts in secondsdelay = 1 现在可以启动服务了：运行radicale。 访问serverip:5232，输入user和password，看看是否能成功进入。 创建service：nano /etc/systemd/system/radicale.service 加入以下内容： [Unit]Description=A simple CalDAV (calendar) and CardDAV (contact) server[Service]ExecStart=/root/radicale/bin/python /root/radicale/bin/radicaleRestart=on-failure[Install]WantedBy=default.target 启动：systemctl enable radicale systemctl start radicale。 反代Caddy的配置非常简单： radicale.example.org reverse_proxy localhost:5232 使用官方文档中的SHA-512对密码进行哈希时的注意事项接下来是radicale官方文档的错误： The secure wayThe users file can be created and managed with htpasswd: Create a new htpasswd file with the user “user1” using SHA-512 as hash method$ htpasswd -5 -c /path/to/users user1New password:Re-type new password: Add another user$ htpasswd -5 /path/to/users user2New password:Re-type new password:Authentication can be enabled with the following configuration: [auth]type = htpasswdhtpasswd_filename = /path/to/usershtpasswd_encryption = autodetect #注意看注意看 千万不要！用！autodetect！ 是什么方法就写什么方法！比如我用SHA-512，就老老实实写htpasswd_encryption = sha512. 否则你会在journalctl --unit radicale.service收获一串美丽的报错：radicale.service: Failed to determine user credentials: No such processFailed at step USER spawning /root/radicale/bin/python: No such process。 参考文献：https://radicale.org/v3.htmlhttps://sigmdel.ca/michel/ha/aml912/radicale_en.htmlhttps://www.atlantic.net/dedicated-server-hosting/how-to-install-radicale-calendar-caldav-and-carddav-on-ubuntu-20-04/","tags":["caddy","radicale"],"categories":["主机折腾记录"]},{"title":"SearXNG接入Open WebUI显示Error searching的解决方法","path":"/2025/03/03/2025-03-03-SearXNG接入Open_WebUI显示Error_searching的解决方法/","content":"可能是由于没开启JSON输出导致的， 在您的/usr/local/searxng-docker/searxng/settings.yml加入如下内容： search: formats: - html - json OpenWebUI的搜索字符串不是%s，也不是空白，是query，例如使用本站SearXNG实例进行搜索，要在联网搜索处配置的URL是https://q.obsp.de/search?q=query。","categories":["主机折腾记录"]},{"title":"Microsoft Account辅助邮箱验证bug:That doesn't match the alternate email associated with your account.","path":"/2025/02/26/microsoft_account_bug/","content":"Bug描述: 格式为xx.abcd@example.org的邮箱是微软账号的辅助邮箱之一。试图验证辅助邮箱地址，输入地址后显示 “That doesn’t match the alternate email associated with your account. The correct email starts with “xx”. Bug原因: 前端程序员太弱智。 解决方案: 把第三个字符.换成URL编码的%2E即可。 类似问题: In my case, I only have two letters as an email name. For example, if my alternative email isab@xyz.org: Verify your email - We will send a verification code to ab*****@XYZ.org. To verify that this is your email address, enter it below. When I key in ab@xyz.org , it always shows: That doesn’t match the alternate email associated with your account. The correct email starts with “ab”. 解决方案: 目前无解。 参考文献: Alternate Email not recognized for Verification code","tags":["microsoft","issues"],"categories":["日常"]},{"title":"2025.2.20更新","path":"/2025/02/21/2025-02-20-2025.2.20更新/","content":"本站邮箱服务neomail.cc的欧洲分站正在筹备中，站长已购入新的域名neomail.nl，预计将使用瑞士托管商Migadu或Infomaniak的服务。","categories":["站务公告"]},{"title":"docker自建Bitwarden的社区精简高级版Vaultwarden，并使用Caddy反代","path":"/2025/02/20/2025-02-19-docker自建Bitwarden的社区精简高级版Vaultwarden，并使用Caddy反代/","content":"在体验过市面上一圈密码管理器（第三方托管+自建）之后，我还是可耻地选择了商业，选择每个月掏2刀给Proton让它赚。 不过我是因为太懒对密码管理的需求太复杂才做出如此选择的，大部分热爱折腾的mjj还是喜欢Keepass和Vaultwarden，今天就来讲一下小鸡自建Vaultwarden的配置。 启动 Docker 容器先mk个dir ：mkdir vw cd vw docker run比较快，不过我个人觉得docker compose方便一些，nano docker-compose.yaml: services: bitwarden: image: vaultwarden/server:latest container_name: bitwarden restart: unless-stopped environment: - DOMAIN=https://vw.mydomain.org/asuperrandomstring - SIGNUPS_ALLOWED=true - WEB_VAULT_ENABLED=true volumes: - ./vw-data:/data ports: - 8080:80 记得把域名的A记录加上，vw.mydomain.org指向Vaultwarden服务器的ip。 这里的path/asuperrandomstring可以拿密码管理器生成一个，然后写在纸上或者文本文档里。千万不要只放在你建好的Vaultwarden密码库里，原因你懂的，就像不要给2FA验证器加2FA登录验证一样…… 配置Caddyfile: vw.mydomain.org route reverse_proxy /asuperrandomstring/* localhost:8080 header_up X-Real-IP http.request.header.Cf-Connecting-Ip 配置好一起启动：docker compose up -d systemctl reload caddy 访问https://vw.mydomain.org/asuperrandomstring/，创建账号，导入密码，不再赘述。 创建完所有需要的账号之后，记得关闭访客注册~ 关闭访客注册的方式是docker compose down，然后修改docker-compose.yaml中SIGNUPS_ALLOWED的值为false，再docker compose up -d即可。 数据备份为防止数据丢失，可以用之前提到过的使用Filen CLI定时备份服务器数据备份你的vw-data文件夹~如果这么做，确保你的Filen账号和密码是自己记得的，而不是存储在Vaultwarden保险库里面的，否则一旦服务器上的数据受损，想从Filen取回备份的时候，会把自己反锁在外面。","tags":["docker","caddy","vaultwarden"],"categories":["主机折腾记录"]},{"title":"Keepass多端同步折腾笔记（Linux+Android+iPadOS）","path":"/2025/02/18/2025-02-18-Keepass多端同步折腾笔记（Linux+Android+iPadOS）/","content":"同步方案密码在Nextcloud上存一份，手机本地存一份，PC本地存一份。 Android手机本地文件夹用Foldersync和Nextcloud进行双向同步（想要用free and open source software的话，下载rclone的安卓GUI Round Sync或者Termux命令行模拟器直接用rclone吧，我只用过前者，不支持双向同步功能，作者说这个功能实现遇到了困难，搁置了。rclone的本体是支持bisync的，但是我懒得在小屏幕上折腾命令行），设置定时任务，每小时一次。我用的安卓Keepass客户端是KeepassDX。 Linux PCLinux桌面将Nextcloud文件夹挂载到本地文件目录，双向同步对文件的修改；或者用rclone连接远端，crontab -e定时运行rclone bisync。 客户端+浏览器扩展是KeepassXC。（我用的浏览器是Brave，需要注意KeepassXC不支持Flatpak版的Brave，请用官方脚本软件源安装） iOSiPad用Strongbox，fetch远程的WebDAV文件夹，或者奇密（Fantasy Pass），后者很便宜，不过部分代码是闭源的，且作者不再维护，GitHub仓库上一次更新是7年前。 Strongbox免费版满足大部分需求，并且ui、自动填充2FA和数据库警报都很好用，生成密码的功能也很全面（还可以加盐，但是我不太懂为什么加盐要在密码管理器生成明文密码这一步进行）。 踩坑：用Argon2加密的iOS用户，一定要记得去加密方式里面把内存调到32MB以下，默认好像是64；如果保持默认的话由于iOS对每个应用的内存限制，在使用输入法内嵌自动填充的时候会崩溃。 总结这套方案唯一的问题就是Nextcloud对数据的处理有时候不太尽如人意，经常因为文件名相同内容不同就报错，但是直接忽略，取最新版就OK了。或者换别的WebDAVS3提供商，例如Koofr，Hetzner Storage Box，Scaleway 对象存储，Storj等等。（之前同步的时候用过Backblaze B2，我的感想是最好不要用B2，B2的list object操作是计费的，rclone非常吃这个操作，尤其是文件版本多小文件多的情况，即使在同步命令里加上--fast-list --local-no-check-updated也能把一天中的2500次操作吃光。）","tags":["rclone","keepass","nextcloud"],"categories":["日常"]},{"title":"Arch Linux(GNOME)安装Fcitx 5输入法+中州韵Rime+雾凇拼音","path":"/2025/02/18/2025-02-18-Arch_Linux(GNOME)安装Fcitx_5输入法+中州韵Rime+雾凇拼音/","content":"以下配置适用于GNOME桌面，KDE和Xfce用户请参考其它文章。 安装Fcitx 5和中州韵Rime：Fcitx 5用AUR helper装： yay -S fcitx5 fcitx5-rime fcitx5-configtool fcitx5-gtk fcitx5-qt fcitx5-config-qt 我一直用sudo yay，发现以sudo运行的时候会提示不建议，直接yay即可。 nano一下/etc/environment，加入如下内容 XMODIFIERS=@im=@fcitxQT_IM_MODULE=fcitxGTK_IM_MODULE=fcitx 安装必要的GNOME组件：安装Input Method Panel 重启一下，打开Fcitx 5配置，把中州韵Rime添加到键盘里面。 安装雾凇拼音：yay -S rime-ice-git 改一下Rime的配置：nano /.local/share/fcitx5/rime/default.custom.yaml，写入： patch: # 仅使用「雾凇拼音」的默认配置，配置此行即可 __include: rime_ice_suggestion:/ # 以下根据自己所需自行定义，仅做参考。 # 针对对应处方的定制条目，请使用 recipe.custom.yaml 中配置，例如 rime_ice.custom.yaml __patch: key_binder/bindings/+: # 开启逗号句号翻页 - when: paging, accept: comma, send: Page_Up - when: has_menu, accept: period, send: Page_Down 参考文献：https://github.com/iDvel/rime-ice","tags":["rime","fcitx5","arch linux","gnome","rime-ice-git"],"categories":["主机折腾记录"]},{"title":"2025.2.17更新","path":"/2025/02/18/2025-02-17-2025.2.17更新/","content":"通过编辑limiter.toml，修复了本站SearXNG实例风控严重，搜索时重定向回主页的问题。","categories":["站务公告"]},{"title":"使用Filen CLI定时备份服务器数据","path":"/2025/02/17/2025-02-16-使用Filen_CLI定时备份服务器数据/","content":"这一篇文章没有docker了，docker方便又无聊，很多服务的部署讲来讲去就那样，Caddy的反代只有一行，更没营养，所以讲点别的吧。 今天的主角是德国的加密云盘filen.io，定价宜人，虽然对于大量存储而言比不上Storj B2 OVH这些便宜的对象存储有竞争力，个人使用也算是便宜大碗该有的都有，不像Proton Drive一样是个挂着加密噱头的半成品。尽管由于加密的特性不支持WebDAV挂载，Filen团队还是别出心裁地开发了一套命令行工具――Filen CLI，让用户可以实现云盘挂载到本地目录的同时，还提供了在本地运行支持WebDAV和S3协议的Filen镜像服务器的功能，用户登录镜像服务器的WebDAV或S3地址，即可轻松挂载Filen云存储到其他设备(具体的操作，等有空了另写一篇)。Filen给免费用户的空间也十分慷慨，初始10 GB，后续可以通过邀请码邀请新用户注册，双方都可以额外获得10 GB，免费用户的空间最高可以达到50GB。有兴趣的朋友可以试一试用我的邀请码注册，即可获得20 GB的免费空间。需要注意的是，Filen的TOS明确禁止一人持有多个免费账户，想要薅羊毛的还是谨慎。 言归正传，接下来我们进入使用场景：Filen账号1个，Linux VPS 1台，VPS上运行着一项服务，数据位于文件夹pathtomyservice，此时我们希望做到的是：每天凌晨2点自动备份该文件夹中的数据到Filen云端，VPS本地数据覆盖Filen云端数据。 连接服务器，执行命令curl -sL https://filen.io/cli.sh | bash，安装Filen CLI。 安装完成后即可通过filen [options...]与Filen CLI交互。 第一次使用应该会要求输入账号和密码（还有2FA code，如果你设置了的话），并且询问是否保存。因为我们要让filen同步命令每天运行，所以就选择保存，以后需要删除的话可以用filen delete-credentials这条命令删掉。 nano 一个 sync 脚本sync-local-to-cloud.sh： export PATH=$HOME/.filen-cli/bin:$PATH #这个很重要，不然会出现command not found的报错 SERVICE_DATA_DIR=/path/to/myservice #需要备份的数据目录 REMOTE_FILEN_DIR=/myserverdata/myservice #远端目录 # Sync the folder to Filenfilen sync $SERVICE_DATA_DIR:ltc:$REMOTE_FILEN_DIR#ltc的意思是local to cloud，本地同步到云端 Filen命令行官方教学：https://docs.filen.io/docs/cli/ 然后使用crontab -e设置定时任务： 00 2 * * * /root/sync-local-to-cloud.sh /root/sync.log 21#每天2点运行一次备份脚本，并且输出log到指定的文件sync.log 大功告成！ 第二天早上起来，记得看看log里是否有成功备份的记录。","tags":["filen"],"categories":["主机折腾记录"]},{"title":"开普勒第二定律推导","path":"/2025/02/16/2025-02-15-开普勒第二定律推导/","content":"","categories":["日常"]},{"title":"本站SearXNG实例存在的问题","path":"/2025/02/15/2025-02-14-本站SearXNG实例存在的问题/","content":"Check this GitHub issue: https://github.com/searxng/searxng/issues/3191","categories":["站务公告"]},{"title":"去谷歌化路漫漫（一）：Proton和电子邮件","path":"/2025/02/15/2025-02-14-去谷歌化路漫漫（一）：Proton和电子邮件/","content":"这篇文章将会很长，去谷歌化的路程是我对所见种种感受改变，对自己十几年互联网生活反思、改进，有失有得的过程。每一期我都会聊一些产品，以及我个人的体验，不客观不真实，仅供参考。今天先讲去谷歌化中的谷歌：Proton。 2024年底，我开始去谷歌化了。 原因和大多数用户的追求隐私支持自由软件不同，我只是想要一个简洁的互联网生活。 希望我的邮件客户端不要再讨好我，从大数据中预测这一封放进社交媒体还是收件箱; 希望每次登录账户时输入密码和2步验证代码就能成功登录，不必拿出另一部设备进行一番操作; 希望在使用YouTubeB站时，我能选择自己想要的客户端，而不是把一切都寄托在谷歌叔叔恩赐一般的优化; 希望我的密码可以跟着我的人走，而不是被绑在Chrome里; 希望讨厌的广告，不要总是霸占搜索引擎的前排; 希望我的账户信息，不会因为我少加了一个密保邮箱和手机号，就面临着随时把自己锁在外面的风险…… 当我刷着Reddit，rdeGoogling这个版块出现在眼前，我一下子就明白了它的意思: 是的，这就是我一直想要的! ……吗? 似乎不是。 论坛里的大家，兴致勃勃地讨论着谷歌套件的替代品，让我感到很受鼓舞。在欧美地区去谷歌化堪称“逆天而行”，离开了谷歌的便利工具，许多人甚至感到一夜变成了原始人。作为手足无措的用户中的一员，我开始从101看起。 去谷第一剑，先斩gmail。而热度最高的gmail，以至于谷歌套件的替代品，就是Proton。 Protonmail，这是一个我在2020年就听说的名字。“端到端加密”“尊重隐私”的邮件，它几乎凭借一己之力，将这原本小众的需求成功带进了大众的视野。从前的Proton只有邮件服务，而如今却大有要做成隐私友好的网络服务提供商中的Google的意思：VPN，密码管理器，邮件，云盘，日历，还有24年底面向Visionary用户（一种类似于给Proton进行了风投的顶级订阅用户，这些用户不仅能获得所有产品的最高级权益，还能保证享受以后的所有升级。当然订阅费很贵，并且根据reddit用户回忆，这种订阅只在Proton初创和24年黑五后开始强推Wallet的时间段开放过）进行了加密货币钱包的内测。 然而，这个提供商却让我感到比Google还令人无所适从。 打开它的网站，紫与蓝的配色十分醒目，居中衬线体的标语是“A better internet starts with privacy and freedom（更好的互联网从隐私和自由开始）”，并在首页展示了Proton的各项业务与最新的促销信息。不得不说，Proton的UI进步不小，从2020年初以一把锁为Logo，灰扑扑的朴素模样，到如今大方优雅、细致入微的紫色系平面设计，像是在向互联网昭示这个新兴的企业已经完成了从丑小鸭到白天鹅的蜕变。 作为一个穷鬼，我首先做的就是点开定价一项项察看。在2024年11月，Proton各项服务的定价（根据我的回忆，此处我会找到互联网档案的资料补上）是这样的：各项服务的基础功能免费，各自的会员定价不同。邮件服务Mail Plus是4.99USDmo，年付八折；第二大业务VPN的Plus是9.99USDmo，两年付五折；密码管理器Pass Plus是2.99USDmo，年付价格为1.99USDmo（Pass与邮箱别名服务SimpleLogin两项业务的会员在早些时候是分开的，分别定价2.99USDmo。24年底完成了Pass Plus和SimpleLogin Premium的合并，合并后提价至3.99USDmo，年付七五折）；云盘Drive 200GB的空间需要收取4.99USDmo，年付八折。 这定价不能算贵，但也不算便宜。在欣赏完这些对隐私大有助益的服务之后，我不禁汗流浃背：这样子一项一项加起来，一个月的花费接近30刀。当然，实际上不需要这么多，因为—— Proton将每一项服务的单价抬高，最终的目的就是吸引用户把目光投向中间高亮的、用紫色框框围起来的选项——Proton Unlimited，月付12.99USD——当然，这不重要——年付9.99USDmo。此时，刚刚在心中算了一笔账的用户就会发现：哎，这个划算！ 不仅如此，Proton在购买页面从未告知客户：当用户购买了一项服务的Plus之后，便不能在同一个Proton账户上叠加其他服务的Plus。也就是说，“我只买Mail Plus和Pass PlusSimpleLogin就够了”的想法是根本不可能实现的，在一项服务的Plus之上，只有直接购买Proton Unlimited的选项。而且，由于月付与年付的价格差异，Proton吸引客户更多地购买Unlimited的年付套餐。 然而，根据互联网上用户的反馈和我个人的经验来看，这种捆绑定价的策略让顾客并不满意：不少人抱怨Proton涉足云盘、密码管理器的领域，而首推的邮箱服务和VPN却并没有进行多少优化，多而不精。 我也忍不住想，如果去谷歌化的过程就是从一个公司跳到另一个公司，相信它对安全和隐私的承诺，并且每个月掏出9.99刀给它，相信这样就能买到安心，那么为什么不直接相信谷歌呢？ 当然，我们有证据说明谷歌对用户的隐私不够尊重，而Proton做得远比谷歌好；但是，这样足够吗？ 就拿邮箱来说，Proton为了保证E2EE（端到端加密，只有收信人和发信人能够解密信息），取消了对邮件行业标准IMAPSMTP的支持，而后又顶不住客户的需求和自己的客户端实在太难用的事实，重新在桌面端加入了Bridge。这种打折腿给根拐的行为两面不讨好，对于真正需要隐私的客户而言，他们大可以去选择OpenPGP加密和Signal聊天软件这些更加成熟且广为接受的产品，而对于普通的客户而言，他们只是想用熟悉方便的客户端收发邮件，都要为此付出一笔月费，而且在移动端，Proton至今没有对第三方邮件客户端的支持。 至于Proton此举对E2EE的实现效果，我只能说：如有。 如果与Proton用户通信的对象位于另一个邮件服务器，那通信对象的邮件提供商一样能够阅读他们之间通信的内容。为了保障同外部联系人的通信也是E2EE，需要提前设置一个密码，对方收到邮件后，需要输入密码才能阅读。问题在于，OpenPGP就在那里，既有Thunderbird和eM Client的原生支持，又有Mailvelope这样的浏览器插件，在电子邮件中实现加密通信早就不是什么新鲜事，Proton此举无异于画蛇添足。Proton的一个主要营销点是总部位于瑞士，然而“瑞士的隐私法律”管辖住的也只有Proton保留与分享你的信息的权力。正如我刚才所说，你的邮件来自互联网各处，发向互联网各处。即使谷歌，或者说以GAFAM为首的数据矿工不再能够收集你收件箱中的信息，但你还是把真实的邮箱地址暴露在各种零售商的mailing list中，那么收集这些公开的信息一样可以拼凑出你的用户画像。 当然，我也有不少Proton的好话要说：除了云盘实在没得夸，邮件也不符合我心中的评价标准，Pass和VPN我还是颇为欣赏的。Pass和SimpleLogin别名互通、会员合并之后，已经成为了我心目中Bitwarden之下第一密码管理器（KeePass论外，从灵活性自建成本来说它应该是断层第一，但是KeePass的好用程度取决于客户端，用户体验上限高、下限低，参差不齐），开源的客户端、方便的导入与导出、独步天下的别名生成与管理，基础功能如附件、分类模板、密码生成和密码口令生成、2FA代码储存和填写，除了无法自建和云端优先这两个小小缺憾，可称得上是该有的都有，后来居上，大有压1Password一头之势。VPN功能丰富，体验稳定，直连也不会捶胸顿足，IP比较脏，但也是在所难免。 当时的我只是想找一个适合穷鬼、可以用IMAPSMTP并且看起来不像随时要跑路的提供商，当然，如果不是大公司的产品，我会更乐意。找来找去，目光锁定了mailbox.org和posteo.de，这两家各有优劣，起价都便宜，前者的优势是有域名邮箱支持，后者定价是PAYG的模式，并且用户忘记按时付款只会暂停发信功能，不会暂停收信功能（我说这个不是教唆网友去薅羊毛，只是说假如我被车撞了在医院里躺了半年，不会因为错过缴费而失去这半年里发到我的地址的重要邮件）。后来用了一会，两家我都不太满意，mailbox的网页从我这里加载实在是太慢了，符合对德国网络的刻板印象；posteo是因为最后我还是更想用域名邮箱一点，但是他们家出于隐私保护不希望保存用户的域名信息。 之所以最后还是用上了域名邮箱，是因为频繁地注册各类账号的我很需要一个别名服务，买不起SimpleLogin和Addy.io，琢磨自建的时候突然发现：不对啊，自建肯定需要一个域名，这整个域名都是我的，我还在这里装模作样地enable和disable做什么，直接开个catch-all，遇到垃圾就block，岂不美哉！而且，未来SimpleLogin或其它别名服务的域名可能为他人注册，或者挪作他用，但是只要我一直续费域名，域名就一直属于我，便宜又可靠。 所以我最后靠上的邮箱解决方案是几个主要域名不开catch-all，几个次要域名开catch-all接收垃圾邮件（不发送的话直接用Cloudflare路由），买的是MXRoute家的不按邮箱个数计费只按容量计费的邮件托管服务，一年下来的域名钱和邮箱钱加起来只要15刀，花五分之一的钱享受比Mail Plus+SimpleLogin更自由的服务（这个数字还能腰斩，明年要放生一个.cc域名）。 当然这个时候就有人要问了，有什么坏处吗？如有吧，比如MXRoute的老板不在瑞士，我的域名registrar也不在瑞士，Cloudflare也不在瑞士，但是我是穷鬼，穷鬼是不会追求这个的，反正本站也不在瑞士（本站的主机托管在风景不知道怎么样反正站长没去过的德国纽伦堡）…… 说完了服务端，该说客户端了。我没有试过所有风评“值得一试”的客户端，比如Claw Mail，我的体验很浅，仅仅是从Fedora换到Arch的时候试了一下，后来发现还是Thunderbird比较得劲。Thunderbird是一个成熟、面面俱到的开源客户端，赖舒服了就不想走，最大的特色大概是自动发现收发信服务器，安卓端的FairEmail用的也是tb的检索功能。不习惯Thunderbird，想要更简洁一点的Linux桌面用户可以尝试一下Evolution。FairEmail是我心目中的安卓最佳，尽管UI褒贬不一，但是功能肯定是最多的，对于默认不加载外部图像的邮件排版得非常好，一目了然，其他客户端往往都需要加载出图片才能看出邮件的内容。K-9无功无过，被Thunderbird合并后表现更加亮眼。eM Client，还没有试过。最近买了NameCrane的三年套餐，SmarterMail为每个顶级域送3个license，过段时间会试试看。 至于各大邮件厂商自己的应用，网易邮箱大师的桌面端和移动端都一般般，校园邮薅的永久vip去广告版尚可一用，但是Thunderbird和FairEmail珠玉在前，只能说是食之无用，弃之可惜。QQ和foxmail也是一样。Tuta的邮件客户端倒是没有广告，不过搜索功能很垃圾，也不能导入导出。 未完待续，本期水完邮箱，下期水一下密码管理软件吧。","tags":["degoogle","proton","email"],"categories":["日常"]},{"title":"2025.2.13 更新","path":"/2025/02/14/2025-02-13-2025.2.13_更新/","content":"取消了访问时出现的Cloudflare的JavaScript质询页面。 本博客主机提供商rarecloud.io正在经历大规模DDoS，攻击者跑了本博客托管VPS 1TB传入流量，让站长草木皆兵，不得不防。 现已将博客迁移到Netcup。","categories":["日常"]},{"title":"docker compose部署订阅管理软件wallos，并启用telegram机器人通知","path":"/2025/02/11/2025-02-11-docker_compose部署订阅管理软件wallos，并启用telegram机器人通知/","content":"话费，域名，邮箱，VPS，密码管理器，云存储，流媒体会员……数字生活的订阅开支无处不在，却难以管理。你是否也有需要的服务到期忘记续费，而不需要的服务不小心自动续费的烦恼? 别担心，已经有开发者推出了解决方案，那就是订阅管理软件Wallos。这是一个可以自部署的开源项目，不仅有多种货币和支付方式，还有各种各样的提醒方式，包括email, discord, pushover, telegram, gotify和webhooks。项目部署支持baremetal和docker，无论你是想高度自定义，还是想简便快捷，都可以做到。 这篇文章聚焦使用docker compose的方式部署Wallos管理订阅，然后使用tg机器人通知来实现提醒。 Wallos的部署我们先mkdir wallos cd wallos 编辑一下nano docker-compose.yaml，添加如下内容: services: wallos: container_name: wallos image: bellamy/wallos:latest ports: - 8282:80/tcp#左边改成你喜欢的端口 environment: TZ: America/Toronto#改成你所在的时区 # Volumes store your data between container upgrades volumes: - ./db:/var/www/html/db - ./logos:/var/www/html/images/uploads/logos restart: unless-stopped 最后，docker compose up -d，大功告成! 运行docker compose logs -f看看是否正常启动。 解析域名，设置反向代理把域名wallos.mydomain.org解析到服务器ip地址。 这里用的是Caddy V2，Apache和Nginx用户请自行同理可得。 nano /etc/caddy/Caddyfile 加入以下内容: wallos.mydomain.org reverse_proxy localhost:8282 重载一下Caddy: systemctl reload caddy 打开浏览器访问wallos.mydomain.org，看看是否正常。创建管理员账号，设置首选货币等，此处不再赘述。 Telegram机器人绑定进入Wallos，点击头像，点击[设置]，点击[通知]中的[Telegram]。 打开Telegram，向@BotFather发送newbot，按照提示操作。 创建完成后，BotFather会发送一条信息: Done! Congratulations on your new bot. You will find it at t.me/botname›. You can now add a description, about section and profile picture for your bot, see /help for a list of commands. By the way, when youve finished creating your cool bot, ping our Bot Support if you want a better username for it. Just make sure the bot is fully operational before you do this.Use this token to access the HTTP API:‹yourapi›Keep your token secure and store it safely, it can be used by anyone to control your bot.For a description of the Bot API, see this page: https://core.telegram.org/bots/api 把获得的yourapi填入Wallos Telegram通知的第一栏。 浏览器访问https://api.telegram.org/botyourapi/getUpdates，回到tg点击t.me/botname给你的机器人发条消息，然后浏览器刷新，即可获得一个JSON文件，其中键”id”的值就是你的chat id，把这个值填入Wallos Telegram通知的第二行，勾选启用，点击测试。 如果tg机器人给你发送了消息，说明配置成功运行。接下来只要为订阅设置通知日期，就可以静待Wallos的自动提醒了!","tags":["docker","caddy","Wallos"],"categories":["主机折腾记录"]},{"title":"Logseq插件市场无法打开","path":"/2025/02/11/2025-02-10-Logseq插件市场无法打开/","content":"首先看一下小猫咪在哪个端口运行，一般原版clash和mihomo party是7890，clash verge rev是7897。 把logseq的网络代理改为system 127.0.0.1:小猫咪端口 有的人可能到这里就解决问题了。 如果你解决不了，刚好又是Linux的话，可以继续看一下。 我在看obsidian的git插件readme时忽然福至心灵，插件作者对Linux用户说Flatpak is not recommended, because it doesn’t have access to all system files.我突然想到自己的Logseq也是flatpak，于是打开Logseq官网下了一个AppImage当对照组，果然AppImage可以连接插件市场，问题解决了。","tags":["troubleshooting","logseq"],"categories":["主机折腾记录"]},{"title":"docker搭建owncloud和onlyoffice并使用caddy反代，实现在线编辑文档","path":"/2025/02/10/2025-02-10-docker搭建owncloud和onlyoffice并使用caddy反代，实现在线编辑文档/","content":"前置条件：Intel(R) Xeon(R) CPU E5-2690 v4 @ 2.60GHz 1 Virtual Core；Debian 12 bookworm；Caddy v2；docker 和 docker compose owncloud使用docker compose部署，首先创建一个你自己喜欢的目录，等下我们把这个docker容器中的文件映射到这个目录。命令：mkdir whatever/path/to/owncloud cd whatever/path/to/owncloud 编辑一下dockerfile：nano docker-compose.yml，模板来自官方： volumes: files: driver: local mysql: driver: local redis: driver: localservices: owncloud: image: owncloud/server:latest container_name: owncloud_server restart: always ports: - 8080:8080 #左边改成你自己喜欢的端口 depends_on: - mariadb - redis environment: - OWNCLOUD_DOMAIN=owncloud.mydomain.org - OWNCLOUD_TRUSTED_DOMAINS=owncloud.mydomain.org,my_ip_address #注意，如果要添加多个信任域名/ip，用半角逗号分隔，不要加空格，不要加端口号。 - OWNCLOUD_DB_TYPE=mysql - OWNCLOUD_DB_NAME=owncloud - OWNCLOUD_DB_USERNAME=owncloud - OWNCLOUD_DB_PASSWORD=owncloud - OWNCLOUD_DB_HOST=mariadb - OWNCLOUD_ADMIN_USERNAME=admin - OWNCLOUD_ADMIN_PASSWORD=Th1sPa$$wordIs$uper$ecret! - OWNCLOUD_MYSQL_UTF8MB4=true - OWNCLOUD_REDIS_ENABLED=true - OWNCLOUD_REDIS_HOST=redis healthcheck: test: [CMD, /usr/bin/healthcheck] interval: 30s timeout: 10s retries: 5 volumes: - files:/mnt/data mariadb: image: mariadb:10.11 # minimum required ownCloud version is 10.9 container_name: owncloud_mariadb restart: always environment: - MYSQL_ROOT_PASSWORD=owncloud - MYSQL_USER=owncloud - MYSQL_PASSWORD=owncloud - MYSQL_DATABASE=owncloud - MARIADB_AUTO_UPGRADE=1 command: [--max-allowed-packet=128M, --innodb-log-file-size=64M] healthcheck: test: [CMD, mysqladmin, ping, -u, root, --password=owncloud] interval: 10s timeout: 5s retries: 5 volumes: - mysql:/var/lib/mysql redis: image: redis:6 container_name: owncloud_redis restart: always command: [--databases, 1] healthcheck: test: [CMD, redis-cli, ping] interval: 10s timeout: 5s retries: 5 volumes: - redis:/data 然后 docker 启动！ docker compose up -d 接下来就是把域名owncloud.mydomain.org解析到服务器ip地址，（这个时候编辑caddyfile并重启caddy也可以，不过我们装完onlyoffice再一起改）等下的onlyoffice也需要一个域名，所以解析的时候顺便把office.mydomain.org也解析到服务器的ip地址吧。 可以使用docker ps查看owncloud和依赖有没有正常运行，如果不行，看一下docker compose logs -f，排查原因。如果行，登录你刚刚在docker-compose.yml里面设置的owncloud管理员账户，进行基础设置，然后到owncloud的应用市场market里面下载onlyoffice这个应用。 owncloud设置大功告成，可以开始设置onlyoffice了： 我们在你喜欢的端口（比如12345）上面跑一个onlyoffice的docker 容器： docker run -i -t -d -p 12345:80 --restart=always onlyoffice/documentserver 这个时候运行一下docker ps，查看刚刚创建的这个容器id，然后运行： docker exec onlyoffice-container-id /var/www/onlyoffice/documentserver/npm/json -f /etc/onlyoffice/documentserver/local.json - services.CoAuthoring.secret.session.string 可能就有人要问了：这个命令是干嘛的呢？ 运行之后返回的字符串是我们onlyoffice的JWT secret key，等下在owncloud里面设置要用。把这个字符串记下来，下文中我们会用指代它。 好了，现在我们来设置Caddy吧。之所以在这一步设置Caddy，是因为onlyoffice（以及collabora online）要求服务端和客户端使用同样的协议，比如同为https或者同为http。我们使用Caddy进行反代，Caddy会自动给域名申请证书，这样owncloud客户端和onlyoffice服务端都是https协议的了。 如果你用的是nginx或者apache，也是一样的，如果需要https，请给两个域名手动申请证书，这里就不详细展开了。 我们编辑一下caddyfile吧：nano /etc/caddy/Caddyfile加上下面这两行： owncloud.mydomain.org reverse_proxy localhost:8080office.mydomain.org reverse_proxy localhost:12345 保存并退出，重载一下caddy：systemctl reload caddy 现在通过owncloud.mydomain.org可以以https访问我们的owncloud实例了。进入owncloud设置，左菜单栏下滑到底部选择“额外的”，在这里你可以设置onlyoffice服务器。 我们在ONLYOFFICE Docs地址那里填入office.mydomain.org，在秘钥那里填入。 点击保存，大功告成！ 尝试在owncloud文件中打开一个.docx结尾的文档，你会看到onlyoffice加载并启动。 好了，结束了！ 吐槽一下： 这篇文章是在Logseq上面写的。Logseq也太难用了吧，这个块状排版真的不适合习惯普通段落式的人……尤其是代码块难用得蛋疼，一旦把一个块变为代码块就无法回到文本编辑模式了…… Logseq的多端同步也很糟糕，使用git自动commit让我不得不每分钟看见一次错误信息，而且iOS的git客户端Working Copy也比较贵。目前我的做法是Syncthing 在 Android手机和Linux PC之间同步，38块钱买一个iOS的Syncthing客户端Möbius Sync高级版（当然由于iOS的后台机制，功能是残废的）把iPad也加入同步链。Syncthing没有中心服务器，我又不能保证有一台设备24小时运行且可访问（这个问题在我整了台小主机之后解决了。我要试试用小主机当中心服务器看看是否改善），所以经常在同步后出现文件冲突，非常烦人。 iOS用户需要注意：Logseq只能打开本地文件夹，而且是在Logseq的iOS应用沙盒中的文件夹，这个问题没办法通过挂载云存储解决。要想和其他设备同步，只能在你的同步软件上面下功夫，让同步软件能够访问Logseq的应用沙盒，Möbius Sync如此，Working Copy应该也是如此（没用过）。","tags":["docker","owncloud","onlyoffice","caddy"],"categories":["主机折腾记录"]},{"title":"tabby使用插件cloud sync settings利用gitlab gist同步设置遇到的问题","path":"/2025/02/10/2025-02-09-tabby使用插件cloud_sync_settings利用gitlab_gist同步设置遇到的问题/","content":"我的PC系统是Manjaro Linux，用tabby当ssh工具。 tabby的官方同步需要自己host一个实例，我不太信得过自己的服务器手艺99.9%downtime，又想要经常备份，巧的是tabby插件市场有一个叫cloud sync settings的插件，可以通过s3webdavgist同步设置，于是我就选了gitlab的snippet（gist同步插件上的提示是github或者gitlab，但是据说gitee也行。没试过） 本来用得好好的，每20s同步一次，偶尔会报错，但是大多是网络问题，过一会就自己恢复了。 今天在使用的时候突然持续报错，每次同步都出错，我一看logs： error: Upload settings file from local| \\Exception: Error: Request failed with status code 400 我心想：莫非是access token过期了？ 然而登上gitlab一看，我设置的期限是1年，还有11个月才会过期。 我试着rotate了一下，换了新的token，报错继续。 此时我发现test connection的时候是无异常的，报错是在开始尝试上传本地配置的时候出现的。 我试着把gist id留空，让它创建新的snippet，这下没问题了。 过了几分钟，我打开gitlab，看到snippet的编辑时间是just now，说明把配置同步到这个snippet没有问题，只有那个旧的snippet是不能用的。 我把gist id改回旧snippet的，果然还是不行。 这下只好用这个新的snippet了。这个插件的同步都是单向同步，可以选择是云端到本地还是本地到云端，我直接把最新的设置从本地传上去，继续使用。 （不过除了刚configure完那一下的方向可以选择，以后的同步都是本地到云端，这个不能改。也就是说假如计算机A、B都连接了同一个云端文件，A做出的改动传到云端，此时你打开计算机B，是不会看到A做出的改动的。B本地的配置文件会直接覆写云端文件。） 虽然找到了问题所在，但是我不知道原因是什么，等我去提个issue看看吧…… 收到的回复： I am not sure yet about the Gitlab issue with snippet, but as I know that Github limited the requests, I think Gitlab is also did the same thing, you can try to switch to other reliable provider like Dropbox, or S3.","tags":["troubleshooting"],"categories":["主机折腾记录"]},{"title":"关于","path":"/about/index.html","content":"欢迎来到Observer’s Space！ 本站是 Typecho 博客 https://obsp.de 的 Hexo 镜像站,目前仍在开发中，内容更新不及时，历史文章尚未同步 已同步。 站长个人主页：https://kamiki.pages.dev 服务状态监控：https://status.obsp.de/status/1 我们有一个供所有人自由使用的SearXNG实例: https://q.obsp.de 。Observer’s Space 不会记录您的搜索历史和ip地址，但是我们希望您不相信我们的保证，做好隐私防护。 以及一个Microbin实例：https://bin.obsp.de 。当您选择Encryption类的权限等级时，您的数据在服务器端是保持加密的，Observer’s Space 无法查看您的数据明文。 Vaultwarden: https://vw.obsp.de Vikunja: https://vikunja.obsp.de Wallos: https://wallos.obsp.de 以上服务均开放注册，请合理利用资源，严禁滥用！ 希望你在这里玩得开心！ 如果你有任何问题需要联系站长，请参考联系方式页面。 本站位于 Codeberg Pages 站长太喜欢重装系统了，为保证数据的稳定，已搬到可以CICD的GitLab Pages，字体使用了 JSDELIVR 和 Bunny Fonts 的服务。"},{"title":"联系方式","path":"/contact/index.html","content":"站长个人主页：https://kamiki.pages.dev Email 发现一个问题？想要占领广告位？单纯想骂站长？给我发邮件，12小时之内回复。如果需要加密，这是我的OpenPGP指纹，你可以在keys.openpgp.org找到对应的公钥：38FF 0A1F 3A89 A24D EC6F DE71 CB33 4844 E3EF BE9B。加密的信息需要24小时回复，因为我可能没和私钥在一起。 Matrix 想要聊天？来Matrix，前提是你信任我们双方的服务器和客户端。 Fediverse，碎碎念的地方。这个Sharkey实例站长超棒！ Email and response should be within 12 hours. If you want encryption, this is my OpenPGP fingerprint and you should be able to find my public key on keys.openpgp.org:38FF 0A1F 3A89 A24D EC6F DE71 CB33 4844 E3EF BE9B. Kindly note that there may be circumstances that I am not with my laptop or telephone and just being too lazy to de-crypt your email, therefore it may take 24 hours before I reply. Matrix if you would like to chat instead of writing letters. If you trust your matrix home server, your client provider, my client provider (Fluffychat) and my home server (matrix.org), please send me a message. Otherwise, please do not do so. Fediverse, this is where I do shit-posting. The maintainer of this Sharkey instance is amazing, kudos."},{"title":"友情链接","path":"/friends/index.html","content":"♥️邮件人 https://mailer.su"},{"title":"订阅邮件","path":"/sub/index.html","content":"Subscription is available again. If you encountered any problem, feel free to contact admin at yuki@obsp.de. @font-face { font-display: block; font-family: Roboto; src: url(https://assets.brevo.com/font/Roboto/Latin/normal/normal/7529907e9eaf8ebb5220c5f9850e3811.woff2) format(\"woff2\"), url(https://assets.brevo.com/font/Roboto/Latin/normal/normal/25c678feafdc175a70922a116c9be3e7.woff) format(\"woff\") } @font-face { font-display: fallback; font-family: Roboto; font-weight: 600; src: url(https://assets.brevo.com/font/Roboto/Latin/medium/normal/6e9caeeafb1f3491be3e32744bc30440.woff2) format(\"woff2\"), url(https://assets.brevo.com/font/Roboto/Latin/medium/normal/71501f0d8d5aa95960f6475d5487d4c2.woff) format(\"woff\") } @font-face { font-display: fallback; font-family: Roboto; font-weight: 700; src: url(https://assets.brevo.com/font/Roboto/Latin/bold/normal/3ef7cf158f310cf752d5ad08cd0e7e60.woff2) format(\"woff2\"), url(https://assets.brevo.com/font/Roboto/Latin/bold/normal/ece3a1d82f18b60bcce0211725c476aa.woff) format(\"woff\") } #sib-container input:-ms-input-placeholder { text-align: left; font-family: Monaco, monospace; color: #c0ccda; } #sib-container input::placeholder { text-align: left; font-family: Monaco, monospace; color: #c0ccda; } #sib-container textarea::placeholder { text-align: left; font-family: Monaco, monospace; color: #c0ccda; } #sib-container a { text-decoration: underline; color: #2BB2FC; } Your subscription could not be saved. Please try again. Your subscription has been successful. Newsletter Subscribe to our newsletter and stay updated. Enter your email address to subscribe Provide your email address to subscribe. For e.g abc@xyz.com I agree to receive your newsletters and accept the data privacy statement. You may unsubscribe at any time using the link in our newsletter. We use Brevo as our marketing platform. By submitting this form you agree that the personal data you provided will be transferred to Brevo for processing in accordance with Brevo's Privacy Policy. SUBSCRIBE window.REQUIRED_CODE_ERROR_MESSAGE = 'Please choose a country code'; window.LOCALE = 'en'; window.EMAIL_INVALID_MESSAGE = window.SMS_INVALID_MESSAGE = \"The information provided is invalid. Please review the field format and try again.\"; window.REQUIRED_ERROR_MESSAGE = \"This field cannot be left blank. \"; window.GENERIC_INVALID_MESSAGE = \"The information provided is invalid. Please review the field format and try again.\"; window.translation = { common: { selectedList: '{quantity} list selected', selectedLists: '{quantity} lists selected' } }; var AUTOHIDE = Boolean(0);"},{"title":"请Yuki喝茶","path":"/buymeatea/index.html","content":"如果我的文章对您有帮助，请考虑打赏: WeChat Reward Code: monero:46iFvur3NEFecBX6fLJmzk2Eh6YsmacLk9kqSVzsazYeXYwoj4NExCi6MBZhh9iUHK2Z9dmHiRc6ZCALfDh2aJ4kG1USXBv ethereum:0x80EA383856128e955253DcBa2497f1eD5D6De5fe tron:TRpsUF7DqwXGSmjxcka7idcmMdCB2hZe2L bitcoin:bc1q4vwuyc2x7la5we8xs72hfe0lwulqxqpurkhanv 万分感谢您的帮助与支持!"}]